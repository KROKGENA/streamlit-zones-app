# app_yandex_map.py
import json
import pandas as pd
import streamlit as st
from collections import defaultdict
from streamlit.components.v1 import html as st_html

st.set_page_config(page_title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ (–Ø–Ω–¥–µ–∫—Å)", layout="wide")
st.title("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –∑–æ–Ω–∞–º, –¥–Ω—è–º –∏ –º–µ—Å—è—Ü–∞–º (–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã)")

@st.cache_data
def load_data():
    df = pd.read_excel("data/–°–≤–æ–¥–∫–∞_—Å_–∑–æ–Ω–∞–º–∏.xlsx")
    df["–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"])
    MONTHS_RU = {
        1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",5:"–ú–∞–π",6:"–ò—é–Ω—å",
        7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"
    }
    df["–ú–µ—Å—è—Ü"] = df["–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"].dt.month.map(MONTHS_RU)
    return df

df = load_data()

# --- –§–ò–õ–¨–¢–†–´ ---
col1, col2, col3, col4 = st.columns([3, 3, 2, 2])
with col1:
    all_days = ["–í—Å–µ –¥–Ω–∏"] + sorted(df["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"].dropna().unique())
    selected_day = st.selectbox("üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", all_days)
with col2:
    all_zones = ["–í—Å–µ –∑–æ–Ω—ã"] + sorted(df["–ó–æ–Ω–∞"].dropna().unique())
    selected_zone = st.selectbox("üìç –ó–æ–Ω–∞:", all_zones)
with col3:
    all_months = ["–í—Å–µ –º–µ—Å—è—Ü—ã"] + sorted(df["–ú–µ—Å—è—Ü"].dropna().unique())
    selected_month = st.selectbox("üìÜ –ú–µ—Å—è—Ü:", all_months)
with col4:
    use_clusters = st.toggle("üß≤ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", value=True)

st.markdown("---")

# --- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ---
filtered_df = df.copy()
if selected_day != "–í—Å–µ –¥–Ω–∏":
    filtered_df = filtered_df[filtered_df["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] == selected_day]
if selected_zone != "–í—Å–µ –∑–æ–Ω—ã":
    filtered_df = filtered_df[filtered_df["–ó–æ–Ω–∞"] == selected_zone]
if selected_month != "–í—Å–µ –º–µ—Å—è—Ü—ã":
    filtered_df = filtered_df[filtered_df["–ú–µ—Å—è—Ü"] == selected_month]

# --- –ö–ê–†–¢–ê –Ø–ù–î–ï–ö–° ---
if filtered_df.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
else:
    center_lat = float(filtered_df["lat"].mean())
    center_lon = float(filtered_df["lon"].mean())

    # 1) –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ‚Üí –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    groups = defaultdict(list)
    for _, r in filtered_df.iterrows():
        key = (float(r["lat"]), float(r["lon"]))
        groups[key].append(r)

    # 2) –ì–æ—Ç–æ–≤–∏–º placemark‚Äô–∏: hint ‚Äî –∫—Ä–∞—Ç–∫–æ; balloon ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∏–∑–∏—Ç–æ–≤
    points = []
    for (lat, lon), rows in groups.items():
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —É–±—ã–≤.
        rows = sorted(rows, key=lambda x: pd.to_datetime(x["–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"]), reverse=True)

        if len(rows) == 1:
            r = rows[0]
            hint = f"üßæ {r['–•–æ–ª–¥–∏–Ω–≥, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']}<br>üìÖ {r['–ú–µ—Å—è—Ü']} | {r['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']}"
            balloon = f"""
                <b>–î–æ–∫—É–º–µ–Ω—Ç:</b> {r['–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞']}<br>
                <b>–î–∞—Ç–∞:</b> {pd.to_datetime(r['–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞']).date()}<br>
                <b>–°—É–º–º–∞ —Å –ù–î–°:</b> {float(r['–°—É–º–º–∞ —Å –ù–î–°']):,.2f} ‚ÇΩ<br>
                <b>–ì—Ä—É–ø–ø–∞:</b> {r['–≥—Ä—É–ø–ø–∞']}<br>
                <b>–•–æ–ª–¥–∏–Ω–≥:</b> {r['–•–æ–ª–¥–∏–Ω–≥, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']}<br>
                <b>–ó–æ–Ω–∞:</b> {r['–ó–æ–Ω–∞']}
            """
        else:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã ‚Äî –¥–µ–ª–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–ª—É–Ω–µ
            hint = f"üìç –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {len(rows)}"
            rows_html = []
            for r in rows:
                rows_html.append(f"""
                    <tr>
                      <td>{pd.to_datetime(r['–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞']).date()}</td>
                      <td>{r['–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞']}</td>
                      <td style="text-align:right">{float(r['–°—É–º–º–∞ —Å –ù–î–°']):,.2f} ‚ÇΩ</td>
                      <td>{r['–≥—Ä—É–ø–ø–∞']}</td>
                      <td>{r['–•–æ–ª–¥–∏–Ω–≥, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']}</td>
                      <td>{r['–ó–æ–Ω–∞']}</td>
                    </tr>
                """)
            table = f"""
                <div style="font-weight:600;margin-bottom:6px">–í–∏–∑–∏—Ç—ã –≤ —ç—Ç—É —Ç–æ—á–∫—É: {len(rows)}</div>
                <div style="max-height:260px;overflow:auto;border:1px solid #eee;border-radius:8px">
                <table style="border-collapse:collapse;width:100%;font-size:13px">
                  <thead>
                    <tr style="background:#f7f7f7">
                      <th style="text-align:left;padding:6px 8px">–î–∞—Ç–∞</th>
                      <th style="text-align:left;padding:6px 8px">–î–æ–∫—É–º–µ–Ω—Ç</th>
                      <th style="text-align:right;padding:6px 8px">–°—É–º–º–∞</th>
                      <th style="text-align:left;padding:6px 8px">–ì—Ä—É–ø–ø–∞</th>
                      <th style="text-align:left;padding:6px 8px">–•–æ–ª–¥–∏–Ω–≥</th>
                      <th style="text-align:left;padding:6px 8px">–ó–æ–Ω–∞</th>
                    </tr>
                  </thead>
                  <tbody>
                    {''.join(rows_html)}
                  </tbody>
                </table>
                </div>
            """
            balloon = table

        points.append({
            "lat": lat, "lon": lon,
            "hint": hint, "balloon": balloon
        })

    st_html(f"""
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<script src="https://api-maps.yandex.ru/2.1/?apikey=a181d434-9dec-492b-8838-73ec5df31ebb&lang=ru_RU" type="text/javascript"></script>
<style>
  html, body, #map {{ width: 100%; height: 600px; margin: 0; padding: 0; }}
</style>
</head>
<body>
<div id="map"></div>
<script>
  const CENTER = [{center_lat}, {center_lon}];
  const USE_CLUSTERS = {str(use_clusters).lower()};
  const POINTS = {json.dumps(points, ensure_ascii=False)};

  ymaps.ready(init);
  function init() {{
    const map = new ymaps.Map('map', {{
      center: CENTER,
      zoom: 7,
      controls: ['zoomControl','typeSelector','fullscreenControl']
    }});

    const geoObjects = POINTS.map(p => new ymaps.Placemark(
      [p.lat, p.lon],
      {{ hintContent: p.hint, balloonContent: p.balloon }},
      {{ preset: 'islands#blueIcon' }}
    ));

    if (USE_CLUSTERS) {{
      // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
      const clusterer = new ymaps.Clusterer({{
        preset: 'islands#invertedBlueClusterIcons',
        groupByCoordinates: false,            // —É–∂–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–ª–∏ —Å–∞–º–∏
        clusterDisableClickZoom: false,
        clusterOpenBalloonOnClick: true,
        clusterBalloonContentLayout: 'cluster#balloonCarousel'
      }});
      clusterer.add(geoObjects);
      map.geoObjects.add(clusterer);
      if (geoObjects.length) map.setBounds(clusterer.getBounds(), {{checkZoomRange:true, zoomMargin:50}});
    }} else {{
      const collection = new ymaps.GeoObjectCollection();
      geoObjects.forEach(go => collection.add(go));
      map.geoObjects.add(collection);
      if (geoObjects.length) map.setBounds(collection.getBounds(), {{checkZoomRange:true, zoomMargin:50}});
    }}
  }}
</script>
</body>
</html>
    """, height=620)

    # --- –ò–¢–û–ì–ò ---
    st.markdown("---")
    st.subheader("üìä –ò—Ç–æ–≥–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:")
    total_docs = len(filtered_df)
    total_sum = float(filtered_df["–°—É–º–º–∞ —Å –ù–î–°"].sum())
    st.info(f"**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {total_docs}  \n**–°—É–º–º–∞ —Å –ù–î–°:** {total_sum:,.2f} ‚ÇΩ")

    # --- –¢–ê–ë–õ–ò–¶–ê ---
    st.subheader("üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    sorted_df = filtered_df.sort_values(by="–°—É–º–º–∞ —Å –ù–î–°", ascending=False)
    st.dataframe(sorted_df, use_container_width=True)
